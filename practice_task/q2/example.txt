Node.js provides a built-in module called fs (file system) for working with files. The fs module allows you to read, write, update, delete, and rename files asynchronously or synchronously.

Here are some examples of how to use the fs module in Node.js:


1. Import the fs module
javascript
Copy code
const fs = require('fs');

2. Reading Files
Asynchronously:
javascript
Copy code
fs.readFile('example.txt', 'utf8', (err, data) => {
  if (err) {
    console.error('Error reading file:', err);
    return;
  }
  console.log('File content:', data);
});

Synchronously:
javascript
Copy code
try {
  const data = fs.readFileSync('example.txt', 'utf8');
  console.log('File content:', data);
} catch (err) {
  console.error('Error reading file:', err);
}

3. Writing Files
Asynchronously:
javascript
Copy code
fs.writeFile('example.txt', 'Hello, Node.js!', (err) => {
  if (err) {
    console.error('Error writing file:', err);
    return;
  }
  console.log('File written successfully');
});

Synchronously:
javascript
Copy code
try {
  fs.writeFileSync('example.txt', 'Hello, Node.js!');
  console.log('File written successfully');
} catch (err) {
  console.error('Error writing file:', err);
}

4. Appending to Files
Asynchronously:
javascript
Copy code
fs.appendFile('example.txt', '\nAppend this line.', (err) => {
  if (err) {
    console.error('Error appending file:', err);
    return;
  }
  console.log('File updated successfully');
});

Synchronously:
javascript
Copy code
try {
  fs.appendFileSync('example.txt', '\nAppend this line.');
  console.log('File updated successfully');
} catch (err) {
  console.error('Error appending file:', err);
}

5. Deleting Files
javascript
Copy code
fs.unlink('example.txt', (err) => {
  if (err) {
    console.error('Error deleting file:', err);
    return;
  }
  console.log('File deleted successfully');
});

6. Checking if a File Exists
javascript
Copy code
fs.access('example.txt', fs.constants.F_OK, (err) => {
  if (err) {
    console.log('File does not exist');
  } else {
    console.log('File exists');
  }
});

7. Creating Directories
javascript
Copy code
fs.mkdir('newFolder', { recursive: true }, (err) => {
  if (err) {
    console.error('Error creating directory:', err);
    return;
  }
  console.log('Directory created successfully');
});

8. Deleting Directories
javascript
Copy code
fs.rmdir('newFolder', { recursive: true }, (err) => {
  if (err) {
    console.error('Error deleting directory:', err);
    return;
  }
  console.log('Directory deleted successfully');
});

9. Watching a File for Changes
javascript
Copy code
fs.watch('example.txt', (eventType, filename) => {
  console.log(`File ${filename} changed! Event: ${eventType}`);
});

10. Renaming Files
javascript
Copy code
fs.rename('oldName.txt', 'newName.txt', (err) => {
  if (err) {
    console.error('Error renaming file:', err);
    return;
  }
  console.log('File renamed successfully');
});

Best Practices
Use Asynchronous Methods: Prefer asynchronous methods (fs.readFile) to prevent blocking the event loop.
Error Handling: Always handle errors gracefully with try...catch or callback error checks.
Promisify fs: Use the fs/promises module or util.promisify for cleaner promise-based file operations.
Let me know if you'd like examples of advanced file system operations!